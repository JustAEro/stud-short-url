services:
  postgres:
    image: postgres:17-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: stud-short-url-db
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - '${POSTGRES_PORT}:5432'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 3s
      retries: 5
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'
    networks:
      - backend

  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - '${API_PORT}:4000'
    volumes:
      - ./.env.docker:/app/.env:ro
    command: sh -c "npx prisma migrate deploy && node dist/apps/api/main.js"
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:4000/api/v1/health']
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'
    networks:
      - backend
      - frontend

  ui:
    build:
      context: .
      dockerfile: apps/ui/Dockerfile
    restart: unless-stopped
    depends_on:
      api:
        condition: service_healthy
    ports:
      - '${UI_PORT}:80'
    healthcheck:
      test: ['CMD', 'wget', '--spider', '-q', 'http://localhost']
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'
    networks:
      - frontend

  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./certs/localhost.pem:/etc/nginx/certs/localhost.pem:ro
      - ./certs/localhost-key.pem:/etc/nginx/certs/localhost-key.pem:ro
      - ./dist/apps/ui/browser:/usr/share/nginx/html:ro
    depends_on:
      - api
      - ui
    networks:
      - frontend
      - backend

volumes:
  pgdata:

networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge
