generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(uuid())
  login             String             @unique
  password          String
  accessToken       String?
  createdLinks      ShortLink[]
  permissions       EditPermission[]
  reports           Report[]
  reportPermissions ReportPermission[]
}

model ShortLink {
  id              String            @id @default(uuid())
  longLink        String
  shortKey        String            @unique
  createdByUserId String
  createdAt       DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime          @default(now()) @updatedAt @db.Timestamptz(6)
  description     String
  linkStats       LinkStat[]
  user            User              @relation(fields: [createdByUserId], references: [id])
  permissions     EditPermission[]
  reports         ReportShortLink[]
}

model LinkStat {
  id          String    @id @default(uuid())
  shortLinkId String
  clickedAt   DateTime  @default(now()) @db.Timestamptz(6)
  browser     String
  referrer    String?
  deviceType  String
  shortLink   ShortLink @relation(fields: [shortLinkId], references: [id], onDelete: Cascade)
}

enum PermissionRole {
  viewer
  editor
  admin
}

model EditPermission {
  id          String         @id @default(uuid())
  userId      String
  shortLinkId String
  role        PermissionRole
  user        User           @relation(fields: [userId], references: [id])
  shortLink   ShortLink      @relation(fields: [shortLinkId], references: [id], onDelete: Cascade)

  @@unique([userId, shortLinkId])
}

model Report {
  id              String             @id @default(uuid())
  name            String
  createdAt       DateTime           @default(now()) @db.Timestamptz(6)
  createdByUserId String
  creatorUser     User               @relation(fields: [createdByUserId], references: [id])
  shortLinks      ReportShortLink[]
  permissions     ReportPermission[]
}

model ReportShortLink {
  id          String    @id @default(uuid())
  reportId    String
  shortLinkId String

  report      Report    @relation(fields: [reportId], references: [id])
  shortLink   ShortLink @relation(fields: [shortLinkId], references: [id])

  @@unique([reportId, shortLinkId])
}

model ReportPermission {
  id       String         @id @default(uuid())
  userId   String
  reportId String
  role     PermissionRole

  user   User   @relation(fields: [userId], references: [id])
  report Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@unique([userId, reportId])
}
